Purpose of Script: The purpose of the script is to pull pertinent information from the downloaded 
		   GWAS Catalogue which is in the form of a tsv file. 

Information Categories: There are certain data fields contained in the GWAS Catalogue file for each SNP.
		        These are present in the form of file Headers. There are 34 total categories. 
			The numbers below correspond to the row indeces in the program (each row is converted
			into a list). 

			0 DATE ADDED TO CATALOG
			1 PUBMEDID
			2 FIRST AUTHOR
			3 DATE
			4 JOURNAL
			5 LINK
			6 STUDY
			7 DISEASE/TRAIT
			8 INITIAL SAMPLE DESCRIPTION
			9 REPLICATION SAMPLE DESCRIPTION
			10 REGION
			11 CHR_ID
			12 CHR_POS
			13 REPORTED GENE(S)
			14 MAPPED_GENE
			15 UPSTREAM_GENE_ID
			16 DOWNSTREAM_GENE_ID
			17 SNP_GENE_IDS
			18 UPSTREAM_GENE_DISTANCE
			19 DOWNSTREAM_GENE_DISTANCE
			20 STRONGEST SNP-RISK ALLELE
			21 SNPS (rsID)
			22 MERGED
			23 SNP_ID_CURRENT
			24 CONTEXT
			25 INTERGENIC
			26 RISK ALLELE FREQUENCY
			27 P-VALUE
			28 PVALUE_MLOG
			29 P-VALUE (TEXT)
			30 OR or BETA
			31 95% CI (TEXT)
			32 PLATFORM [SNPS PASSING QC]
			33 CNV
Functions:
	
	catalogue_parser(filename)
		The catalogue parser reads in the GWAS Catalogue file. Each row contains information on a 
		particular SNP from a study. This function pulls information for each SNP (from the row)
		and creates a dictionary object containing a 'name' corresponding to the rsID and 
		other pertinent information. In this case we are pulling the following categories 
		corresponding to the numbered list above: 7, 10 - 19, 21. The dictionary objects are 
		are appended to a list and that list is returned by the function.
	data_retrieval(rsID, snpList)
		The data_retrieval function takes in an rsID corresponding to a SNP and the list generated
		from the catalogue_parser function. It then iterates through the list and finds any
		dictionary object containing the given rsID. These are compiled into a list that the 
		function returns.
	data_gene_ret(gene, snpList)
		The data_gene_ret function takes in a gene name and the list generated from the 
		catalogue_parser function. It then iterates through the list and finds any dictionary 
		objects containing the gene name. The findings are compiled into a list which the function
		then returns.

Main:
	The current main is mostly hardcoded. Eventually it will take in a filename and a set of boolean 
	values to determine if you are using a gene or rsID as a parameter. If that gene or rsID is not 
	found in any of the dictionary objects then the program will let the user know that their search 
	did nor return anything either by a line of text or through another boolean value.
